# -*- coding: utf-8 -*-
"""titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgtz6pBwCUk7L9tur3EZY24rr0iXLfi4
"""

import tensorflow as tf

# List all physical devices
print("Physical devices:", tf.config.list_physical_devices())

# Check GPU device details
from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sn
train=pd.read_csv('train.csv')
train.dtypes

train.drop(train[['Name','Cabin','Ticket']],axis=1,inplace=True)
train.dtypes

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
train['Sex']=le.fit_transform(train['Sex'])
train['Embarked']=le.fit_transform(train['Embarked'])
train

sn.heatmap(train.corr(),annot=True)
plt.show()

tr=['Pclass','Sex','Fare','Embarked','Survived']
od=[]
for column in tr:
  traning_data=pd.DataFrame(train[[column]],columns=[column])
  od.append(traning_data)
odd=pd.concat(od,axis=1)
odd.isnull().sum()

test=pd.read_csv('test.csv')
test.drop(test[['Name','Age','SibSp','Parch','Ticket','Cabin']],axis=1,inplace=True)
test['Sex']=le.fit_transform(test['Sex'])
test['Embarked']=le.fit_transform(test['Embarked'])
test.isnull().sum()
test=test.fillna(0)

from sklearn.preprocessing import MinMaxScaler
scale=MinMaxScaler()
odd['Fare']=scale.fit_transform(odd[['Fare']])
odd

from sklearn.preprocessing import MinMaxScaler
x_train = odd.drop('Survived', axis=1)
y_train = train['Survived']
x_test = test.drop("PassengerId", axis=1)
print(odd.shape,y_train.shape,x_test.shape)
odd

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
models={'lr':LogisticRegression(),
        'svm':SVC(),
        'knn':KNeighborsClassifier(),
        'tree':DecisionTreeClassifier(),
        'forest':RandomForestClassifier(max_depth=100,criterion='entropy'),
        'gaussian':GaussianNB()}
g=dict()
for key,values in models.items():
  values.fit(x_train,y_train)
  y_pred=values.predict(x_test)
  acc=round(values.score(x_train,y_train)*100,2)
  g[key]=acc
data = [(key, value) for key, value in g.items()]
acc_list=pd.DataFrame(data,columns=['models','accuracy'])
acc_list

forest=RandomForestClassifier(max_depth=100,criterion='entropy')
forest.fit(x_train,y_train)
pred=forest.predict(x_test)
submission = pd.DataFrame({
        "PassengerId":test["PassengerId"],
        "Survived":pred
    })
submission

'''submission.to_csv('submission.csv', index=False)
from google.colab import files
files.download('submission.csv')'''

import xgboost as xgb
import pandas as pd
from sklearn.metrics import accuracy_score

# Initialize the XGBoost classifier
model = xgb.XGBClassifier(max_depth=100, use_label_encoder=False, eval_metric='mlogloss')

# Fit the model
model.fit(x_train, y_train)

# Make predictions on the test set
pred = model.predict(x_test)

# Calculate the accuracy (assuming you have the true labels for x_test)
# You need to have y_test to calculate accuracy
accuracy = round(model.score(x_train,y_train)*100,2)
accuracy